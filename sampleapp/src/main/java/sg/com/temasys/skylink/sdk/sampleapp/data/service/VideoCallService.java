package sg.com.temasys.skylink.sdk.sampleapp.data.service;

import android.content.Context;
import android.graphics.Point;
import android.util.Log;

import org.webrtc.SurfaceViewRenderer;

import java.util.Date;

import sg.com.temasys.skylink.sdk.listener.LifeCycleListener;
import sg.com.temasys.skylink.sdk.listener.MediaListener;
import sg.com.temasys.skylink.sdk.listener.OsListener;
import sg.com.temasys.skylink.sdk.listener.RemotePeerListener;
import sg.com.temasys.skylink.sdk.rtc.Errors;
import sg.com.temasys.skylink.sdk.rtc.SkylinkCaptureFormat;
import sg.com.temasys.skylink.sdk.rtc.SkylinkConfig;
import sg.com.temasys.skylink.sdk.rtc.SkylinkConnection;
import sg.com.temasys.skylink.sdk.rtc.UserInfo;
import sg.com.temasys.skylink.sdk.sampleapp.ConfigFragment.Config;
import sg.com.temasys.skylink.sdk.sampleapp.utils.Utils;
import sg.com.temasys.skylink.sdk.sampleapp.data.model.PermRequesterInfor;
import sg.com.temasys.skylink.sdk.sampleapp.utils.AudioRouter;
import sg.com.temasys.skylink.sdk.sampleapp.utils.PermissionUtils;
import sg.com.temasys.skylink.sdk.sampleapp.videocall.VideoCallContract;

import static sg.com.temasys.skylink.sdk.sampleapp.utils.Utils.toastLog;
import static sg.com.temasys.skylink.sdk.sampleapp.utils.Utils.toastLogLong;

/**
 * Created by muoi.pham on 20/07/18.
 */

public class VideoCallService extends SDKService implements VideoCallContract.Service, LifeCycleListener, MediaListener, OsListener, RemotePeerListener {

    private final String TAG = VideoCallService.class.getName();

    private Context mContext;

    //this variable need to be static for configuration change
    private static VideoCallContract.Presenter mPresenter;

    private SdkConnectionManager sdkConnectionManager;

    //this variable need to be static for configuration change
    private static SkylinkConnection skylinkConnection;

    private String MY_USER_NAME;
    private String roomName;

    public VideoCallService(Context mContext) {
        this.mContext = mContext;
        MY_USER_NAME = Config.USER_NAME_VIDEO;
    }

    @Override
    public void setPresenter(VideoCallContract.Presenter presenter) {
        this.mPresenter = presenter;
    }

    //----------------------------------------------------------------------------------------------
    // VideoCallService method implementation to work with SkylinkSDK
    //----------------------------------------------------------------------------------------------

    public void connectToRoomServiceHandler(String roomName) {
        this.roomName = roomName;

        sdkConnectionManager = new SdkConnectionManager(mContext);
        skylinkConnection = sdkConnectionManager.initializeSkylinkConnectionForVideoCall();

        setListeners();

        // Create the Skylink connection string.
        // In production, the connection string should be generated by an external entity
        // (such as a secure App server that has the Skylink App Key secret), and sent to the App.
        // This is to avoid keeping the App Key secret within the application, for better security.
        String skylinkConnectionString = Utils.getSkylinkConnectionString(
                roomName, new Date(), SkylinkConnection.DEFAULT_DURATION);

        // The skylinkConnectionString should not be logged in production,
        // as it contains potentially sensitive information like the Skylink App Key ID.

        boolean connectFailed = !connectToRoomBaseServiceHandler(skylinkConnection, skylinkConnectionString, Config.USER_NAME_VIDEO);

        if (connectFailed) {
            String log = "[SA][Video][connectToRoom] Unable to connect to room!";
            toastLog(TAG, mContext, log);
            return;
        }

        // Initialize and use the Audio router to switch between headphone and headset
        AudioRouter.startAudioRouting(mContext);
    }

    public void disconnectFromRoomServiceHandler() {
        if (skylinkConnection != null && isConnectingOrConnectedBaseServiceHandler(skylinkConnection)) {
            disconnectFromRoomBaseServiceHandler(skylinkConnection);
            AudioRouter.stopAudioRouting(mContext);
        }
    }

    public boolean isConnectingOrConnectedServiceHandler() {
        if (skylinkConnection != null) {
            return isConnectingOrConnectedBaseServiceHandler(skylinkConnection);
        }
        return false;
    }

    public boolean toggleCameraServiceHandler() {
        return toggleCameraBaseServiceHandler(skylinkConnection);
    }

    public boolean toggleCameraServiceHandler(boolean isToggle) {
        return toggleCameraBaseServiceHandler(skylinkConnection, isToggle);
    }

    public void muteLocalAudioServiceHandler(boolean audioMuted) {
        muteLocalAudioBaseServiceHandler(skylinkConnection, audioMuted);
    }

    public void muteLocalVideoServiceHandler(boolean videoMuted) {
        muteLocalVideoBaseServiceHandler(skylinkConnection, videoMuted);
    }

    public SkylinkCaptureFormat[] getCaptureFormatsServiceHandler(SkylinkConfig.VideoDevice videoDevice) {
        if (skylinkConnection != null) {
            return getCaptureFormatsBaseServiceHandler(skylinkConnection, videoDevice);
        }

        return null;
    }

    public String getCaptureFormatsStringServiceHandler(SkylinkCaptureFormat[] captureFormats) {
        String strFormat = "No CaptureFormat currently registered.";
        String strFormats = "No CaptureFormats currently registered.";

        if (Utils.isCaptureFormatsValid(captureFormats)) {
            strFormats = Utils.captureFormatsToString(captureFormats);
        }

        // Get the current CaptureFormat, if there is one.
        SkylinkCaptureFormat captureFormat = getCaptureFormatsBaseServiceHandler(skylinkConnection);


        if (captureFormat != null) {
            strFormat = captureFormat.toString();
        }

        String captureFormatString = "Current capture format: " + strFormat + ".\r\n" +
                "Supported capture formats: " + strFormats + ".";
        return captureFormatString;
    }

    public String getPeerIdServiceHandler(int index) {
        String[] peerIdList = getPeerIdListBaseServiceHandler(skylinkConnection);
        // Ensure index does not exceed range of possible indices on peerIdList.
        if (peerIdList != null && index > peerIdList.length - 1 || index < 0) {
            return null;
        }
        return peerIdList[index];
    }

    public String getCurrentCameraNameServiceHandler() {

        return getCurrentCameraNameBaseServiceHandler(skylinkConnection);
    }

    public SkylinkConfig.VideoDevice getCurrentVideoDeviceServiceHandler() {
        return getCurrentVideoDeviceBaseServiceHandler(skylinkConnection);
    }

    public void setInputVideoResolutionServiceHandler(int width, int height, int fps) {
        setInputVideoResolutionBaseServiceHandler(skylinkConnection, width, height, fps);
    }

    public SurfaceViewRenderer getVideoViewServiceHandler(String remotePeerId) {
        return getVideoViewBaseServiceHandler(skylinkConnection, remotePeerId);
    }

    public String getRoomPeerIdNickServiceHandler() {
        if (skylinkConnection == null) {
            return null;
        }

        String roomName = Config.ROOM_NAME_VIDEO;

        String title = "Room: " + getRoomRoomIdServiceHandler(roomName);
        // Add PeerId to title if a Peer occupies clicked location.
        title += "\r\n" + getPeerIdNickBaseServiceHandler(skylinkConnection, getPeerIdBaseServiceHandler(skylinkConnection));
        return title;

    }

    public String getRoomRoomIdServiceHandler(String roomName) {
        String roomId = "";
        if (skylinkConnection != null) {
            roomId = getRoomIdBaseServiceHandler(skylinkConnection);
        }

        return roomName + " (" + roomId + ")";
    }

    public void getVideoResolutionsServiceHandler(String peerId) {

        getInputVideoResolutionBaseServiceHandler(skylinkConnection);

        if (peerId != null) {
            getSentVideoResolutionBaseServiceHandler(skylinkConnection, peerId);

            getReceivedVideoResolutionBaseServiceHandler(skylinkConnection, peerId);
        }
    }

    public void switchCameraServiceHandler() {
        switchCameraBaseServiceHandler(skylinkConnection);
    }

    private int getNumRemotePeersServiceHandler() {
        int totalInRoom = getTotalInRoomServiceHandler();
        if (totalInRoom == 0) {
            return 0;
        }
        // The first Peer is the local Peer.
        return totalInRoom - 1;
    }

    public int getTotalInRoomServiceHandler() {
        String[] peerIdList = getPeerIdListBaseServiceHandler(skylinkConnection);

        if (peerIdList == null) {
            return 0;
        }
        // Size of array is number of Peers in room.
        return peerIdList.length;
    }

    public int getSeekBarIndexDimServiceHandler(SkylinkCaptureFormat[] captureFormats, int width, int height) {
        if (!Utils.isCaptureFormatsValid(captureFormats)) {
            return -1;
        }

        int index = -1;
        SkylinkCaptureFormat format;
        int length = captureFormats.length;
        for (int i = 0; i < length; ++i) {
            format = captureFormats[i];
            if (width == format.getWidth() && height == format.getHeight()) {
                index = i;
                break;
            }
        }
        return index;
    }

    public int getSeekBarIndexFpsServiceHandler(SkylinkCaptureFormat captureFormat, int fps) {
        if (!Utils.isCaptureFormatValid(captureFormat)) {
            return -1;
        }

        int fpsMin = captureFormat.getFpsMin();
        // fps must be within captureFormat's fps range.
        if (fps < fpsMin || fps > captureFormat.getFpsMax()) {
            return -1;
        }

        int index = fps - fpsMin;
        return index;
    }

    public SkylinkCaptureFormat getSeekBarValueDimServiceHandler(int progress, SkylinkCaptureFormat[] captureFormats) {
        if (!Utils.isCaptureFormatsValid(captureFormats) || progress >= captureFormats.length) {
            return null;
        }
        SkylinkCaptureFormat format = captureFormats[progress];
        return format;
    }

    public int getSeekBarValueFpsServiceHandler(int progress, SkylinkCaptureFormat format) {
        if (!Utils.isCaptureFormatValid(format)) {
            return -1;
        }
        int fpsMin = format.getFpsMin();
        int fps = fpsMin + progress;
        // Fps value must be within format's fps range.
        if (fps < fpsMin || fps > format.getFpsMax()) {
            return -1;
        }
        return fps;
    }


    //----------------------------------------------------------------------------------------------
    // Skylink Listeners
    //----------------------------------------------------------------------------------------------

    /**
     * Set listeners to receive callbacks when events are triggered.
     * SkylinkConnection instance must not be null or listeners cannot be set.
     * Do not set before {@link SkylinkConnection#init} as that will remove all existing Listeners.
     *
     * @return false if listeners could not be set.
     */
    private boolean setListeners() {
        String logTag = "[SA][Video][setLtn] ";
        String log = "";
        if (skylinkConnection != null) {
            log = logTag + "Setting Listeners...";
            Log.d(TAG, log);
            skylinkConnection.setLifeCycleListener(this);
            skylinkConnection.setMediaListener(this);
            skylinkConnection.setOsListener(this);
            skylinkConnection.setRemotePeerListener(this);
            log = logTag + "Done.";
            Log.d(TAG, log);
            return true;
        } else {
            log = logTag + "Unable to set Listeners as skylinkConnection is not available!";
            Log.d(TAG, log);
            return false;
        }
    }

    /***
     * Lifecycle Listener Callbacks -- triggered during events that happen during the SDK's
     * lifecycle
     */

    /**
     * Triggered when connection is successful
     *
     * @param isSuccessful
     * @param message
     */

    @Override
    public void onConnect(boolean isSuccessful, String message) {
        if (isSuccessful) {
            mPresenter.onConnectUIChangePresenterHandler();

            String log = "[SA][Video][onConnect] Connected to room " + roomName + " (" +
                    getRoomIdBaseServiceHandler(skylinkConnection) +
                    ") as " + getPeerIdBaseServiceHandler(skylinkConnection) + " (" + MY_USER_NAME + ").";
            toastLogLong(TAG, mContext, log);
        } else {
            String log = "Skylink failed to connect!\nReason : " + message;
            toastLogLong(TAG, mContext, log);
            mPresenter.onDisconnectUIChangePresenterHandler();
        }
    }

    @Override
    public void onDisconnect(int errorCode, String message) {
        mPresenter.onDisconnectUIChangePresenterHandler();
        String log = "[onDisconnect] ";
        if (errorCode == Errors.DISCONNECT_FROM_ROOM) {
            log += "We have successfully disconnected from the room.";
        } else if (errorCode == Errors.DISCONNECT_UNEXPECTED_ERROR) {
            log += "WARNING! We have been unexpectedly disconnected from the room!";
        }
        log += " Server message: " + message;
        toastLogLong(TAG, mContext, log);
    }

    @Override
    public void onLockRoomStatusChange(String remotePeerId, boolean lockStatus) {
        String log = "[SA] Peer " + remotePeerId + " changed Room locked status to "
                + lockStatus + ".";
        toastLog(TAG, mContext, log);
    }

    @Override
    public void onReceiveLog(int infoCode, String message) {
        Utils.handleSkylinkReceiveLog(infoCode, message, mContext, TAG);
    }

    @Override
    public void onWarning(int errorCode, String message) {
        Utils.handleSkylinkWarning(errorCode, message, mContext, TAG);
    }

    /**
     * Media Listeners Callbacks - triggered when receiving changes to Media Stream from the
     * remote peer
     */

    /**
     * Triggered after the user's local media is captured.
     *
     * @param videoView
     */
    @Override
    public void onLocalMediaCapture(SurfaceViewRenderer videoView) {
        String log = "[SA][onLocalMediaCapture] ";
        if (videoView == null) {
            log += "VideoView is null!";
            Log.d(TAG, log);
            mPresenter.addSelfViewPresenterHandler(getVideoViewBaseServiceHandler(skylinkConnection, null));
        } else {
            log += "Adding VideoView as selfView.";
            Log.d(TAG, log);
            mPresenter.addSelfViewPresenterHandler(videoView);
        }
    }

    @Override
    public void onInputVideoResolutionObtained(int width, int height, int fps,
                                               SkylinkCaptureFormat captureFormat) {
        mPresenter.noteInputVideoResolutionsPresenterHandler(width, height, fps, captureFormat);

        String log = "[SA][VideoResInput] The current video input has width x height, fps: " +
                width + " x " + height + ", " + fps + " fps.\r\n";
        Log.d(TAG, log);
    }

    @Override
    public void onReceivedVideoResolutionObtained(String peerId, int width, int height, int fps) {
        mPresenter.setUiResTvStatsReceivedPresenterHandler(width, height, fps);

        String log = "[SA][VideoResRecv] The current video received from Peer " + peerId +
                " has width x height, fps: " + width + " x " + height + ", " + fps + " fps.\r\n";
        Log.d(TAG, log);
    }

    @Override
    public void onSentVideoResolutionObtained(String peerId, int width, int height, int fps) {
        mPresenter.setUiResTvStatsSentPresenterHandler(width, height, fps);

        String log = "[SA][VideoResSent] The current video sent to Peer " + peerId +
                " has width x height, fps: " + width + " x " + height + ", " + fps + " fps.\r\n";
        Log.d(TAG, log);
    }

    @Override
    public void onVideoSizeChange(String peerId, Point size) {
        String peer = "Peer " + peerId;
        // If peerId is null, this call is for our local video.
        if (peerId == null) {
            peer = "We've";
        }
        Log.d(TAG, peer + " got video size changed to: " + size.toString() + ".");
    }

    @Override
    public void onRemotePeerMediaReceive(String remotePeerId, SurfaceViewRenderer videoView) {
        mPresenter.addRemoteViewPresenterHandler();

        String log = "Received new ";
        if (videoView != null) {
            log += "Video ";
        } else {
            log += "Audio ";
        }
        log += "from Peer " + getPeerIdNickBaseServiceHandler(skylinkConnection, remotePeerId) + ".\r\n";

        UserInfo remotePeerUserInfo = getUserInfoBaseServiceHandler(skylinkConnection, remotePeerId);
        log += "isAudioStereo:" + remotePeerUserInfo.isAudioStereo() + ".\r\n" +
                "video height:" + remotePeerUserInfo.getVideoHeight() + ".\r\n" +
                "video width:" + remotePeerUserInfo.getVideoHeight() + ".\r\n" +
                "video frameRate:" + remotePeerUserInfo.getVideoFps() + ".";
        Log.d(TAG, log);
    }

    @Override
    public void onRemotePeerAudioToggle(String remotePeerId, boolean isMuted) {
        String log = "Peer " + getPeerIdNickBaseServiceHandler(skylinkConnection, remotePeerId) +
                " Audio mute status via:\r\nCallback: " + isMuted + ".";

        // It is also possible to get the mute status via the UserInfo.
        UserInfo userInfo = getUserInfoBaseServiceHandler(skylinkConnection, remotePeerId);
        if (userInfo != null) {
            log += "\r\nUserInfo: " + userInfo.isAudioMuted() + ".";
        }
        toastLog(TAG, mContext, log);
    }

    @Override
    public void onRemotePeerVideoToggle(String remotePeerId, boolean isMuted) {
        String log = "Peer " + getPeerIdNickBaseServiceHandler(skylinkConnection, remotePeerId) +
                " Video mute status via:\r\nCallback: " + isMuted + ".";

        // It is also possible to get the mute status via the UserInfo.
        UserInfo userInfo = getUserInfoBaseServiceHandler(skylinkConnection, remotePeerId);
        if (userInfo != null) {
            log += "\r\nUserInfo: " + userInfo.isVideoMuted() + ".";
        }
        toastLog(TAG, mContext, log);
    }

    /**
     * OsListener Callbacks - triggered by Android OS related events.
     */
    @Override
    public void onPermissionRequired(
            final String[] permissions, final int requestCode, final int infoCode) {
        // Create a new PermRequesterInfor to represent this request.
        PermRequesterInfor permRequesterInfor = new PermRequesterInfor(permissions, requestCode, infoCode);

        PermissionUtils.onPermissionRequiredHandler(
                permRequesterInfor, TAG, mContext, mPresenter.getFragmentPresenterHandler());
    }

    @Override
    public void onPermissionGranted(String[] permissions, int requestCode, int infoCode) {
        Utils.onPermissionGrantedHandler(permissions, infoCode, TAG);
    }

    @Override
    public void onPermissionDenied(String[] permissions, int requestCode, int infoCode) {
        Utils.onPermissionDeniedHandler(infoCode, mContext, TAG);
    }

    /**
     * Remote Peer Listener Callbacks - triggered during events that happen when data or connection
     * with remote peer changes
     */

    @Override
    public void onRemotePeerJoin(String remotePeerId, Object userData, boolean hasDataChannel) {
        String log = "Your Peer " + getPeerIdNickBaseServiceHandler(skylinkConnection, remotePeerId) + " connected.";
        toastLog(TAG, mContext, log);
    }

    @Override
    public void onRemotePeerLeave(String remotePeerId, String message, UserInfo userInfo) {

        mPresenter.onRemotePeerLeaveUIChangePresenterHandler();

        int numRemotePeers = getNumRemotePeersServiceHandler();
        String log = "Your Peer " + getPeerIdNickBaseServiceHandler(skylinkConnection, remotePeerId, userInfo) + " left: " +
                message + ". " + numRemotePeers + " remote Peer(s) left in the room.";
        toastLog(TAG, mContext, log);
    }

    @Override
    public void onRemotePeerConnectionRefreshed(String remotePeerId, Object userData, boolean hasDataChannel, boolean wasIceRestarted) {
        String peer = "Skylink Media Relay server";
        if (remotePeerId != null) {
            peer = "Peer " + getPeerIdNickBaseServiceHandler(skylinkConnection, remotePeerId);
        }
        String log = "Your connection with " + peer + " has just been refreshed";
        if (wasIceRestarted) {
            log += ", with ICE restarted.";
        } else {
            log += ".\r\n";
        }

        UserInfo remotePeerUserInfo = getUserInfoBaseServiceHandler(skylinkConnection, remotePeerId);
        log += "isAudioStereo:" + remotePeerUserInfo.isAudioStereo() + ".\r\n" +
                "video height:" + remotePeerUserInfo.getVideoHeight() + ".\r\n" +
                "video width:" + remotePeerUserInfo.getVideoHeight() + ".\r\n" +
                "video frameRate:" + remotePeerUserInfo.getVideoFps() + ".";
        toastLog(TAG, mContext, log);
    }

    @Override
    public void onRemotePeerUserDataReceive(String remotePeerId, Object userData) {
        // If Peer has no userData, use an empty string for nick.
        String nick = "";
        if (userData != null) {
            nick = userData.toString();
        }
        String log = "[SA][onRemotePeerUserDataReceive] Peer " + getPeerIdNickBaseServiceHandler(skylinkConnection, remotePeerId) +
                ":\n" + nick;
        toastLog(TAG, mContext, log);
    }

    @Override
    public void onOpenDataConnection(String peerId) {
        Log.d(TAG, "onOpenDataConnection");
    }


}
