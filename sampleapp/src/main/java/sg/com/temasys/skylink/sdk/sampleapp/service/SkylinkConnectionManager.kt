package sg.com.temasys.skylink.sdk.sampleapp.service

import android.content.Context
import android.util.Log
import sg.com.temasys.skylink.sdk.rtc.SkylinkCallback
import sg.com.temasys.skylink.sdk.rtc.SkylinkConfig.SkylinkRoomSize
import sg.com.temasys.skylink.sdk.rtc.SkylinkConnection
import sg.com.temasys.skylink.sdk.rtc.SkylinkConnection.SkylinkState
import sg.com.temasys.skylink.sdk.rtc.SkylinkError
import sg.com.temasys.skylink.sdk.rtc.SkylinkEvent
import sg.com.temasys.skylink.sdk.sampleapp.setting.Config
import sg.com.temasys.skylink.sdk.sampleapp.utils.Constants.CONFIG_TYPE
import sg.com.temasys.skylink.sdk.sampleapp.utils.Utils
import java.io.UnsupportedEncodingException
import java.net.*
import java.util.*

/**
 * Created by muoi.pham on 20/07/18.
 * This class is responsible for managing connection with SkylinkSDK like connect, disconnect,...
 */
class SkylinkConnectionManager(skylinkCommonService: SkylinkCommonService?, context: Context) {
    private val TAG = SkylinkConnectionManager::class.java.name
    private val context: Context
    private var skylinkConnection: SkylinkConnection? = null
    private var skylinkCommonService: SkylinkCommonService? = null

    /**
     * Initialize a SkylinkConnection object
     */
    fun initializeSkylinkConnection(typeCall: CONFIG_TYPE?): SkylinkConnection? {
        val logTag = "[SA][SCM][initializeSkylinkConnection] "
        var log = logTag

        //check internet connection
        if (!Utils.isInternetOn()) {
            log = "Internet connection is off !"
            Utils.toastLog(TAG, context, log)
            return null
        }
        if (skylinkCommonService == null) {
            log += "Error: SkylinkCommonService is null"
            Log.e(TAG, log)
            return null
        }

        //Get the user config for connection
        val skylinkConfig = skylinkCommonService!!.skylinkConfig
        if (skylinkConfig == null) {
            log += "Error: SkylinkConfig is null"
            Log.e(TAG, log)
            return null
        }
        skylinkConnection = SkylinkConnection.getInstance()
        // Set SkylinkConnection instance in skylinkCommonService ASAP.
        skylinkCommonService!!.setSkylinkConnection(skylinkConnection!!)
        // Initialize this SkylinkConnection instance.
        skylinkConnection!!.init(skylinkConfig, context.applicationContext, object : SkylinkCallback {
            override fun onError(error: SkylinkError, details: HashMap<String, Any>) {
                val contextDescription = details[SkylinkEvent.CONTEXT_DESCRIPTION] as String?
                Log.e("SkylinkCallback", contextDescription)
                Utils.toastLog(TAG, context, "Unable to init SkylinkConnection instance as $contextDescription")

                // update the UI to disconnected state
                skylinkCommonService!!.onConnectToRoomFailed(contextDescription!!)
            }
        })

        // Set Skylink listeners necessary for current demo/call
        skylinkCommonService!!.setSkylinkListeners()

        // Get room name and user name in setting
        val mRoomName = Utils.getRoomNameByType(typeCall)
        val mUserName = Utils.getUserNameByType(typeCall)
        skylinkCommonService!!.setRoomName(mRoomName)
        skylinkCommonService!!.setUserName(mUserName)
        return skylinkConnection
    }

    /**
     * Connects to a room using a SkylinkConnectionString that caller MUST ensure is URL safe.
     *
     * @param typeCall Specify which is current demo/call like audio/video/file/...
     * @return SkylinkConnection
     */
    fun connectToRoomByConnectionString(typeCall: CONFIG_TYPE?): SkylinkConnection? {
        val logTag = "[SA][SCM][connectToRoomByConnectionString] "
        var log = logTag

        //check internet connection
        if (!Utils.isInternetOn()) {
            log = "Internet connection is off !"
            Utils.toastLog(TAG, context, log)
            return null
        }
        if (skylinkCommonService == null) {
            log += "Error: SkylinkCommonService is null"
            Log.e(TAG, log)
            return null
        }

        // Initialize the skylink connection using SkylinkConnectionManager if it is not initialized
        if (skylinkConnection == null) {
            skylinkConnection = initializeSkylinkConnection(typeCall)
        }

        // Get room name and user name in setting
        val mRoomName = Utils.getRoomNameByType(typeCall)
        val mUserName = Utils.getUserNameByType(typeCall)
        val skylinkConfig = skylinkCommonService!!.skylinkConfig

        // Create the Skylink connection string.
        // In production, the connection string should be generated by an external entity
        // (such as a secure App server that has the Skylink App Key secret), and sent to the App.
        // This is to avoid keeping the App Key secret within the application, for better security.
        val skylinkConnectionString = getSkylinkConnectionString(
                mRoomName, Date(), SkylinkConnection.DEFAULT_DURATION, skylinkConfig!!.skylinkRoomSize)

        // The skylinkConnectionString should not be logged in production,
        // as it contains potentially sensitive information like the Skylink App Key ID.
        skylinkConnection!!.connectToRoom(skylinkConnectionString!!, mUserName, object : SkylinkCallback {
            override fun onError(error: SkylinkError, details: HashMap<String, Any>) {
                val contextDescription = details[SkylinkEvent.CONTEXT_DESCRIPTION] as String?
                Log.e("SkylinkCallback", contextDescription)
                Utils.toastLog(TAG, context, "\"Unable to connectToRoomByConnectionString as $contextDescription")

                // update the UI to disconnected state
                skylinkCommonService!!.onConnectToRoomFailed(contextDescription!!)
            }
        })
        log = logTag + "Connecting..."
        Utils.toastLog(TAG, context, log)
        return skylinkConnection
    }

    /**
     * Connects to a room using app key, app secret,... directly
     *
     * @param typeCall Specify which is current demo/call like audio/video/file/...
     * @return SkylinkConnection
     */
    fun connectToRoomByAppKey(typeCall: CONFIG_TYPE?): SkylinkConnection? {
        val logTag = "[SA][SCM][connectToRoomByConnectionString] "
        var log = logTag

        //check internet connection
        if (!Utils.isInternetOn()) {
            log = "Internet connection is off !"
            Utils.toastLog(TAG, context, log)
            return null
        }
        if (skylinkCommonService == null) {
            log += "Error: SkylinkCommonService is null"
            Log.e(TAG, log)
            return null
        }

        // Initialize the skylink connection using SkylinkConnectionManager if it is not initialized
        if (skylinkConnection == null) {
            skylinkConnection = initializeSkylinkConnection(typeCall)
        }

        // Get room name and user name in setting
        val mRoomName = Utils.getRoomNameByType(typeCall)
        val mUserName = Utils.getUserNameByType(typeCall)

        // The skylinkConnectionString should not be logged in production,
        // as it contains potentially sensitive information like the Skylink App Key ID.
        skylinkConnection!!.connectToRoom(Config.getAppKey(), Config.getAppKeySecret(), mRoomName, mUserName,
                object : SkylinkCallback {
                    override fun onError(error: SkylinkError, details: HashMap<String, Any>) {
                        val contextDescription = details[SkylinkEvent.CONTEXT_DESCRIPTION] as String?
                        Log.e("SkylinkCallback", contextDescription)
                        Utils.toastLog(TAG, context, "\"Unable to connectToRoomByAppKey as $contextDescription")

                        // update the UI to disconnected state
                        skylinkCommonService!!.onConnectToRoomFailed(contextDescription!!)
                    }
                })
        log = logTag + "Connecting..."
        Utils.toastLog(TAG, context, log)
        return skylinkConnection
    }

    /**
     * Disconnects from the room we are currently in.
     * Once disconnect is complete, [LifeCycleListener.onDisconnectFromRoom]}
     * will be called.
     */
    fun disconnectFromRoom() {
        if (skylinkConnection == null) return
        skylinkConnection!!.disconnectFromRoom(object : SkylinkCallback {
            override fun onError(error: SkylinkError, details: HashMap<String, Any>) {
                val contextDescription = details[SkylinkEvent.CONTEXT_DESCRIPTION] as String?
                Log.e("SkylinkCallback", contextDescription)
                Utils.toastLog(TAG, context, "\"Unable to disconnectFromRoom as $contextDescription")
            }
        })
    }

    /**
     * Check the current [SkylinkState][sg.com.temasys.skylink.sdk.rtc.SkylinkConnection.SkylinkState]
     * of the current SkylinkConnection instance.
     *
     * @return true if connects to room, false if not or disconnects
     */
    val isConnectingOrConnected: Boolean
        get() {
            if (skylinkConnection == null) return false
            val state = skylinkConnection!!.skylinkState
            return if (state == SkylinkState.CONNECTING ||
                    state == SkylinkState.CONNECTED) {
                true
            } else false
        }

    /**
     * Returns the SkylinkConnectionString, which MUST BE URL SAFE.
     * Required inputs are: App key, App secret, Room name, Room start time, and Room duration.
     *
     * @param roomName        Name of the room
     * @param startTime       Room Start Time
     * @param duration        Duration of the room in Hours
     * @param skylinkRoomSize The size of the room, restricted by the server
     * Only the first Peer to start the room will have it's room_size effected.
     * Later Peers who join the room will not have their room_size value respected.
     * If more Peers than indicated by the effected room_size join the room,
     * they may get warnings and/or not be allowed to join room.
     * @return
     */
    fun getSkylinkConnectionString(roomName: String, startTime: Date, duration: Int,
                                   skylinkRoomSize: SkylinkRoomSize): String? {
        var info = """
            Room name: $roomName, startTime: $startTime, duration: $duration.

            """.trimIndent()

        // Convert the date in to ISO format
        val dateString = Utils.getISOTimeStamp(startTime)

        // Compute RFC 2104-compliant HMAC signature
        var cred = Utils.calculateRFC2104HMAC(roomName + "_" + duration + "_"
                + dateString, Config.getAppKeySecret())
        cred = try {
            URLEncoder.encode(cred, "UTF-8")
        } catch (e: UnsupportedEncodingException) {
            val error = """
                [ERROR] Unable to encode credentials. Not joining room!
                Details: Could not URLEncode generated credentials.
                Exception: ${e.message}
                """.trimIndent()
            Log.e(TAG, error)
            return null
        }

        // Ensure connectionString is url safe
        // This is very IMPORTANT!!!
        // A connectionString that is not url safe will likely generate error(s)
        // and not be able to connect to room.
        val urlStart = "http://host/"
        var connectionString = (urlStart + Config.getAppKey() + "/"
                + roomName + "/" + dateString + "/" + duration)
        info += "Precursor connectionString: \"$connectionString\"\r\n"
        var urlObject: URL? = null
        var uriObject: URI? = null
        try {
            urlObject = URL(connectionString)
            uriObject = URI(urlObject.protocol, urlObject.userInfo, urlObject.host,
                    urlObject.port, urlObject.path,
                    urlObject.query, urlObject.ref)
        } catch (e: MalformedURLException) {
            info += """
                Error: Could not create URL safe connectionString:
                ${e.message}
                """.trimIndent()
            Log.e(TAG, info)
            return null
        } catch (e: URISyntaxException) {
            info += """
                Error: Could not create URL safe connectionString:
                ${e.message}
                """.trimIndent()
            Log.e(TAG, info)
            return null
        }

        // Add credentials to string.
        val uriString = uriObject.toString()
        /* Parse connectionString from:
        http://host/<connectionString>
        */connectionString = (uriString.substring(urlStart.length, uriString.length)
                + "?cred=" + cred + "&room_size=" + skylinkRoomSize.value)
        info += "URL safe connectionString: \"$connectionString\""
        Log.d(TAG, info)
        return connectionString
    }

    fun setSkylinkConnection(skylinkConnection: SkylinkConnection?) {
        this.skylinkConnection = skylinkConnection
    }

    /**
     * Both [SkylinkCommonService] and [Context] are required for [SkylinkConnectionManager] functioning.
     *
     * @param skylinkCommonService
     * @param context
     */
    init {
        this.skylinkCommonService = skylinkCommonService
        this.context = context
    }
}