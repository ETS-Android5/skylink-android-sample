apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'robolectric'
apply plugin: 'sonar-runner'
apply plugin: 'jacoco'

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile 'junit:junit:4.11'
    androidTestCompile 'org.robolectric:robolectric:2.3'
    androidTestCompile 'com.android.support:support-v4:19.0.1'
    androidTestCompile 'org.mockito:mockito-all:1.9.5'
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"
    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 21
        versionCode 1
        versionName "0.9.0"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

// Check environment variables for Archiva configuration (e.g CI environment)
if (System.getenv("ARCHIVA_URL") != null) {
    archiva_contextUrl = "$System.env.ARCHIVA_URL"
    println 'Used environment variable for Archiva URL'
}

if (System.getenv("ARCHIVA_USR") != null) {
    archiva_username = "$System.env.ARCHIVA_USR"
    println 'Used environment variable for Archiva Username'
}

if (System.getenv("ARCHIVA_PWD") != null) {
    archiva_password = "$System.env.ARCHIVA_PWD"
    println 'Used environment variable for Archiva Password'
}

project.ext.isReleaseVersion = !currentVersion.endsWith("SNAPSHOT")

publishing {
    publications {
        mavenSdk(MavenPublication) {
            artifacts {
                groupId 'sg.com.temasys.skylink.sdk'
                artifactId 'skylink_sdk'
                version currentVersion
                artifact 'build/outputs/aar/skylink_sdk-release.aar'
            }
        }
    }
    repositories {
        maven {
            if (!project.ext.isReleaseVersion) {
                url archiva_contextUrl + "/snapshots"
            } else {
                url archiva_contextUrl + "/internal"
            }
            credentials {
                username archiva_username
                password archiva_password
            }
        }
    }
}

// Code quality
sonarRunner {
    sonarProperties {
        property "sonar.projectKey", "AND"
        property "sonar.projectName", "Skylink Android SDK"
        property "sonar.projectVersion", currentVersion
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.binaries", "build/intermediates/classes/debug"
        property "sonar.tests", "src/androidTest/java"
        property "sonar.junit.reportsPath", file("$buildDir/test-results")
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPath", "build/jacoco/testDebug.exec"
        property "sonar.profile", "Temasys-Android"

    }
}

// Test coverage using jacoco
jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        'src/main/java',
        'src/gen'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {

    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }

    // Rules to ignore Dagger/Butterknife
    classDirectories = fileTree(
            dir: 'build/intermediates/classes/debug',
            excludes: ['sg/com/temasys/skylink/sdk/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebug.exec')
    // Bit hacky but fixes https://code.google.com/p/android/issues/detail?id=69174.
    // We iterate through the compiled .class tree and rename $$ to $.
    doFirst {
        new File('skylink_sdk/build/intermediates/classes/').eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}
