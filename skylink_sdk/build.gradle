apply plugin: 'android-sdk-manager'
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'robolectric'
apply plugin: 'sonar-runner'
apply plugin: 'jacoco'
apply plugin: 'android-library'
apply plugin: 'maven'

configurations {
    jaxDoclet
    classpaths
}

repositories {
    maven {
        url = 'http://archiva.temasys.com.sg/repository/internal'
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'org.webrtc:libjingle_peer_connection:8676'
    compile 'com.github.nkzawa:socket.io-client:0.4.2'
    androidTestCompile 'org.jmockit:jmockit:1.8'
    androidTestCompile 'junit:junit:4.11'
    androidTestCompile 'org.robolectric:robolectric:2.3'
    androidTestCompile 'com.android.support:support-v4:19.0.1'
    androidTestCompile 'org.mockito:mockito-all:1.9.5'

    jaxDoclet("com.google.doclava:doclava:1.0.5")
    classpaths files('build/classes/release')
    classpaths files(new File(System.getenv('ANDROID_HOME') + '/platforms/android-17/android.jar'))
}

android {
    compileSdkVersion 21
    buildToolsVersion "21.1.2"
    defaultConfig {
        minSdkVersion 17
        targetSdkVersion 21
        versionCode 1
        versionName "0.9.3"
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

/***
 * Sonar Runner configurations for code quality
 */
sonarRunner {
    sonarProperties {
        property "sonar.projectKey", "AND"
        property "sonar.projectName", "Skylink Android SDK"
        property "sonar.projectVersion", currentVersion
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.binaries", "build/intermediates/classes/debug"
        property "sonar.tests", "src/androidTest/java"
        property "sonar.junit.reportsPath", file("$buildDir/test-results")
        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.jacoco.reportPath", "build/jacoco/testDebug.exec"
        property "sonar.profile", "Temasys-Android"
    }
}

/***
 * Test coverage using jacoco
 */
jacoco {
    toolVersion = "0.7.1.201405082137"
}

def coverageSourceDirs = [
        'src/main/java',
        'src/gen'
]

task jacocoTestReport(type: JacocoReport, dependsOn: "testDebug") {

    group = "Reporting"
    description = "Generate Jacoco coverage reports after running tests."
    reports {
        xml.enabled = true
        html.enabled = true
    }

    // Rules to ignore Dagger/Butterknife
    classDirectories = fileTree(
            dir: 'build/intermediates/classes/debug',
            excludes: ['sg/com/temasys/skylink/sdk/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class'
            ])
    sourceDirectories = files(coverageSourceDirs)
    executionData = files('build/jacoco/testDebug.exec')
    // Bit hacky but fixes https://code.google.com/p/android/issues/detail?id=69174.
    // We iterate through the compiled .class tree and rename $$ to $.
    doFirst {
        new File('skylink_sdk/build/intermediates/classes/').eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}

/***
 * Java doc using Doclava
 */
task androidJavadoc(type: Javadoc, dependsOn: 'compileReleaseJava') {
    source = android.sourceSets.main.java.srcDirs
    title = null
    options.docletpath = configurations.jaxDoclet.files.asType(List)
    options.classpath = configurations.classpaths.files.asType(List)
    options {
        doclet "com.google.doclava.Doclava"
        bootClasspath new File(System.getenv('JAVA_HOME') + "/jre/lib/rt.jar")
        addStringOption "hdf project.name", "SkylinkSDK for Android " + currentVersion
        addStringOption "federate android", "http://d.android.com/reference"
        addStringOption "federationxml android", "http://doclava.googlecode.com/svn/static/api/android-10.xml"
        addStringOption "d", "build/docs/doc"
        addStringOption "templatedir", "doclava_custom_css"
    }
}

task androidJavadocsJar(type: Jar, dependsOn: 'androidJavadoc') {
    classifier = 'javadoc'
    from 'build/docs/doc/reference/'
}

/***
 * Generate Jar file
 */
task clearJar(type: Delete) {
    delete 'build/libs/' + "skylink_sdk-release" + '.jar'
}

task makeJar(type: Copy) {
    from('build/intermediates/bundles/release/')
    into('build/libs/')
    include('classes.jar')
    rename('classes.jar', "skylink_sdk-release" + '.jar')
}

makeJar.dependsOn(clearJar, build)

/***
 * Publishing to maven repository
 */
// Check environment variables for Archiva configuration (e.g CI environment)
if (System.getenv("bamboo_ARCHIVA_URL") != null) {
    archiva_contextUrl = "$System.env.bamboo_ARCHIVA_URL"
    println 'Used environment variable for Archiva URL' + archiva_contextUrl
}

if (System.getenv("bamboo_ARCHIVA_USR") != null) {
    archiva_username = "$System.env.bamboo_ARCHIVA_USR"
    println 'Used environment variable for Archiva Username' + archiva_username
}

if (System.getenv("bamboo_ARCHIVA_PWD") != null) {
    archiva_password = "$System.env.bamboo_ARCHIVA_PWD"
    println 'Used environment variable for Archiva Password ' + archiva_password
}

project.ext.isReleaseVersion = !currentVersion.endsWith("SNAPSHOT")

artifacts {
    archives androidJavadocsJar
    archives file('build/libs/skylink_sdk-release.jar')
}

uploadArchives {
    repositories {
        mavenDeployer {
            def repositoryUrl = ""
            if (!project.ext.isReleaseVersion) {
                repositoryUrl = archiva_contextUrl + "/snapshots"
            } else {
                repositoryUrl = archiva_contextUrl + "/internal"
            }
            repository(url: repositoryUrl) {
                authentication(userName: archiva_username, password: archiva_password)
            }
            pom.version = currentVersion
            pom.artifactId = "skylink_sdk"
            pom.groupId = "sg.com.temasys.skylink.sdk"
        }
    }
}
